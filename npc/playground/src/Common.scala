import chisel3._
import chisel3.util._

object Instructions 
{
    val ebreak =BitPat("b0000000_00001_00000_000_00000_11100_11")
    val ecall  =BitPat("b0000000_00000_00000_000_00000_11100_11")//mepc=pc, mcause=0x0b, pc=mtvec

    //R-type
    val add =   BitPat("b0000000_?????_?????_000_?????_01100_11")//R(dest) = src1 + src2);
    val addw=   BitPat("b0000000_?????_?????_000_?????_01110_11")//R(dest) = SEXT(BITS((src1 + src2), 31, 0), 32));
    val sub =   BitPat("b0100000_?????_?????_000_?????_01100_11")//R(dest) = src1 - src2);
    val subw=   BitPat("b0100000_?????_?????_000_?????_01110_11")//R(dest) = SEXT(BITS(src1 - src2, 31, 0), 32));
    
    val mul   = BitPat("b0000001_?????_?????_000_?????_01100_11")//R(dest) = src1 * src2
    val mulw  = BitPat("b0000001_?????_?????_000_?????_01110_11")//R(dest) = SEXT(BITS(src1 * src2, 31, 0), 32));
    val divw  = BitPat("b0000001_?????_?????_100_?????_01110_11")//R(dest) = SEXT(BITS((int)BITS(src1, 31, 0) / (int)BITS(src2, 31, 0), 31, 0), 32)
    val divu  = BitPat("b0000001_?????_?????_101_?????_01100_11")//R(dest) = src1 / src2
    val divuw = BitPat("b0000001_?????_?????_101_?????_01110_11")//R(dest) = SEXT(BITS(BITS(src1, 31, 0) / BITS(src2, 31, 0), 31, 0), 32)
    val remw  = BitPat("b0000001_?????_?????_110_?????_01110_11")//R(dest) = SEXT(BITS((int)BITS(src1, 31, 0) % (int)BITS(src2, 31, 0), 31, 0), 32)
    val remuw = BitPat("b0000001_?????_?????_111_?????_01110_11")//R(dest) = SEXT(BITS(BITS(src1, 31, 0) % BITS(src2, 31, 0), 31, 0), 32));
    val remu  = BitPat("b0000001_?????_?????_111_?????_01100 11")//R(dest) = src1 % src2
 
    val sllw =  BitPat("b0000000_?????_?????_001_?????_01110_11")//R(dest) = SEXT(BITS(src1 << BITS(src2, 4, 0), 31, 0), 32));
    val srlw =  BitPat("b0000000_?????_?????_101_?????_01110_11")//R(dest) = SEXT(BITS(((uint32_t)BITS(src1, 31, 0)) >> BITS(src2, 4, 0), 31, 0), 32)
    val sraw =  BitPat("b0100000_?????_?????_101_?????_01110_11")//R(dest) = SEXT(BITS((int)BITS(src1, 31, 0) >> BITS(src2, 4, 0), 31, 0), 32)
    val and =   BitPat("b0000000_?????_?????_111_?????_01100_11")//R(dest) = src1 & src2);
    val or  =   BitPat("b0000000_?????_?????_110_?????_01100_11")//R(dest) = src1 | src2);
    val xor =   BitPat("b0000000_?????_?????_100_?????_01100_11")//R(dest) = src1 ^ src2)
    val slt =   BitPat("b0000000_?????_?????_010_?????_01100_11")//if((long long) src1 < (long long) src2)R(dest)=1;else R(dest)=0
    val sltu =  BitPat("b0000000_?????_?????_011_?????_01100_11")//if(src1 < src2)R(dest)=1;else R(dest)=0

    val mret =  BitPat("b0011000_00010_00000_000_00000_11100_11")//pc=mepc
    //I-type
    val lb =    BitPat("b???????_?????_?????_000_?????_00000_11")
    val lbu =   BitPat("b???????_?????_?????_100_?????_00000_11")
    val lh =    BitPat("b???????_?????_?????_001_?????_00000_11")
    val lhu =   BitPat("b???????_?????_?????_101_?????_00000_11")
    val lw =    BitPat("b???????_?????_?????_010_?????_00000_11")
    val lwu =   BitPat("b???????_?????_?????_110_?????_00000_11")
    val ld =    BitPat("b???????_?????_?????_011_?????_00000_11")
    
    val jalr =  BitPat("b???????_?????_?????_000_?????_11001_11")
    val addi =  BitPat("b???????_?????_?????_000_?????_00100_11")
    val addiw=  BitPat("b???????_?????_?????_000_?????_00110_11")//R(dest) = SEXT(BITS(src1 + src2, 31, 0), 32));
    
    val slli =  BitPat("b000000?_?????_?????_001_?????_00100_11")//R(dest) = src1 << shamt);
    val slliw=  BitPat("b000000?_?????_?????_001_?????_00110_11")//R(dest) = SEXT(BITS(src1 << shamt, 31, 0), 32));
    val srai =  BitPat("b010000?_?????_?????_101_?????_00100_11")//R(dest) = ((long long)src1) >> shamt);
    val sraiw=  BitPat("b010000?_?????_?????_101_?????_00110_11")//R(dest) = SEXT(BITS((int) BITS(src1, 31, 0) >> shamt, 31, 0), 32));
    val srli =  BitPat("b000000?_?????_?????_101_?????_00100_11")//R(dest) = src1 >> shamt);
    val srliw=  BitPat("b000000?_?????_?????_101_?????_00110_11")//R(dest) = SEXT(BITS((uint32_t)BITS(src1, 31, 0) >> shamt, 31, 0), 32));
    val andi =  BitPat("b???????_?????_?????_111_?????_00100_11")//R(dest) = src1 & src2);
    val ori =   BitPat("b???????_?????_?????_110_?????_00100_11")//R(dest) = src1 | src2)
    val xori =  BitPat("b???????_?????_?????_100_?????_00100_11")//R(dest) = src1 ^ src2);
    val sltiu = BitPat("b???????_?????_?????_011_?????_00100_11")//if(src1 < src2)R(dest)=1;else R(dest)=0;
    
    val csrrs = BitPat("b???????_?????_?????_010_?????_11100_11")//word_t temp; getCSRs(&temp, csr); setCSRs(csr, (temp | src1)); R(dest) = temp;);
    val csrrw = BitPat("b???????_?????_?????_001_?????_11100_11")//word_t temp; getCSRs(&temp, csr); setCSRs(csr, src1); R(dest) = temp;);
    //S-type
    val sb =    BitPat("b???????_?????_?????_000_?????_01000_11")
    val sh =    BitPat("b???????_?????_?????_001_?????_01000_11")
    val sw =    BitPat("b???????_?????_?????_010_?????_01000_11")
    val sd =    BitPat("b???????_?????_?????_011_?????_01000_11")
    //B-type
    val beq =   BitPat("b???????_?????_?????_000_?????_11000_11")//if(src1 == src2)s->dnpc=s->pc+dest);
    val bne =   BitPat("b???????_?????_?????_001_?????_11000_11")//if(src1 != src2)s->dnpc=s->pc+dest);
    val blt =   BitPat("b???????_?????_?????_100_?????_11000_11")//if((long long) src1 <  (long long) src2)s->dnpc = s->pc+dest);
    val bge =   BitPat("b???????_?????_?????_101_?????_11000_11")//if((long long) src1 >= (long long) src2)s->dnpc = s->pc+dest);
    val bltu=   BitPat("b???????_?????_?????_110_?????_11000_11")//if(src1 <  src2)s->dnpc = s->pc+dest);
    val bgeu=   BitPat("b???????_?????_?????_111_?????_11000_11")//if(src1 >= src2)s->dnpc = s->pc+dest);

    //U-type
    val auipc = BitPat("b???????_?????_?????_???_?????_00101_11")
    val lui =   BitPat("b???????_?????_?????_???_?????_01101_11")
    //J-type
    val jal =   BitPat("b???????_?????_?????_???_?????_11011_11")
}
